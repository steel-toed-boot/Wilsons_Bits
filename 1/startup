rednet.open("bottom")
os.loadAPI("screenDesigner")
local playerDet = peripheral.wrap("left")
local username = nil --logged in person
local monX,monY = screenDesigner.getMonitorSize()
local buttonFunc = {}
local guudeBucks = {}
local guudeBucksReference = {}
local purchaseList = {}
local rednetMessage
local rednetMessageSender
local continue = true
local failReason
local result
local modeValue = 1
local modeText={"Buy Mode ","Sell Mode"}
local lastUser = "Nobody"

local mainScreenText = {"Welcome to Wilson's Bits, a one of a","kind of shopping experience.","","To Log In just right click the player","detector surrounded by cyan.","Please Remember to ALWAYS Log Out","and don't leave the game logged in."}

function newButtonFunction(id,func)
	buttonFunc[id]=func
end

function rednt()
	rednetMessage=nil
	rednetMessageSender = nil
	
	local id,msg,dist = rednet.receive()
	rednetMessage = msg
	rednetMessageSender = id
end

function updateGuudeBucksTable(name,amount)
	guudeBucks[tostring(username)]=amount+guudeBucks[tostring(username)]
	for spot=1,#guudeBucksReference do
		if guudeBucksReference[spot][1]==name then
			guudeBucksReference[spot][2]=amount+guudeBucksReference[spot][2]
		end
	end
	rednet.send(8,guudeBucks[tostring(username)])
end

function fileReaders()
	file = io.open("guudeBucks.txt","r")
	local lineCount=0
	for line in file:lines() do
		lineCount=lineCount+1
		for person,amount in string.gmatch(line,"(.+):(.+)") do
			guudeBucks[tostring(person)]=amount
			guudeBucksReference[lineCount]={tostring(person),amount}
		end
	end
	file:close()
	
	file = io.open("purchaseList.txt","r")
	local lineCount=0
	for line in file:lines() do
		lineCount=lineCount+1
		for item,cost,actualName,identifier in string.gmatch(line,"(.+):(.+):(.+):(.+)") do
			purchaseList[lineCount]={item,cost,actualName,identifier}
		end
	end
	file:close()
end

function newPlayer()
	local file = io.open("guudeBucks.txt","a")
	for line=1,#guudeBucksReference do
		--iterates all lines to get to the last line
		file:write("")
	end
	file:write("\n"..username..":".."100")
	file:close()
end

function updateMoney(player,amount)
	updateGuudeBucksTable(player,amount)
	local file = io.open("guudeBucks.txt","w")
	for line=1,#guudeBucksReference do
		file:write(guudeBucksReference[line][1]..":"..guudeBucksReference[line][2])
	end
	file:close()
end

function activeSection()
	modeValue = 1
	screenDesigner.setWindowState(2,true)
	continue=true
	while continue do
		screenDesigner.writeText(31,7,modeText[modeValue])
		--waits for logout button or purchase occurence
		parallel.waitForAny(screenDesigner.testTouch,rednt)
		--if a button is not pushed and parallel is a success, it is the rednet message that worked.
		updateId=screenDesigner.getUpdateId()
		if updateId ~= nil and rednetMessage==nil then
			buttonFunc[updateId]()
		elseif rednetMessage~=nil then
			for msg1,msg2 in string.gmatch(rednetMessage,"(.+):(.+)") do
				if msg1=="giveGb" then
					updateMoney(username,msg2)
				elseif msg1=="itemScan" then
					itemScan(msg2)
					sleep(3.5)
					screenDesigner.setWindowState(2,true)
				else --if giveGb was not the message or itemScan, then a purchase was made from the purchase computer
					sendFeedback(msg1,msg2)
				end
			end
			continue = true
		end
	end
end

function itemScan(itemIdAndAmount)
	for itemId,amount in string.gmatch(itemIdAndAmount,"(.+)/(.+)") do
		for spot=1,#purchaseList do
			if purchaseList[spot][4]==itemId then
				rednet.send(16,"approve")
				local t = "+"..purchaseList[spot][2]*amount.."gB"
				screenDesigner.writeText(19,12,"+"..purchaseList[spot][2]*amount.."gB",nil,colors.lime)
				if purchaseList[spot][2]*amount>9000 then
					screenDesigner.writeText(math.floor((19-1 - string.len(t)) /2) +1,11,"(OVER 9000!)",nil,colors.red)
				end
				updateMoney(username,purchaseList[spot][2]*amount)
				break
			elseif spot==#purchaseList then
				rednet.send(16,"deny") 
				screenDesigner.writeText(19,12,"Item is not sellable.",nil,colors.purple)
			end
		end
	end
end

function testFurther(uniqueId,cost,amount)
	rednet.send(16,"give:"..uniqueId..":"..amount)
	id,msg,dist = rednet.receive() --waits for success or failure msg
	if msg=="Success" then
		failReason=" "
		result = "Completed!"
		rednet.send(17,"buy")
	else
		result = "Failed!"
		failReason=msg
	end
	
	sleep(1)
	rednet.send(rednetMessageSender,result..":"..failReason)
	updateMoney(username,cost*-1)
	
end

function sendFeedback(uniqueIdAndCost,amount)
	--uniqueId is made by the interactive sorter
	for uniqueId,cost in string.gmatch(uniqueIdAndCost,"(.+):(.+)") do
		amount = string.gsub(amount,"x","")
		if tonumber(cost)>tonumber(guudeBucks[tostring(username)]) then
			result = "Failed"
			failReason = "Insufficient Funds"
		else
			testFurther(uniqueId,cost,amount)
		end
	end
end


function helpFunc()
	screenDesigner.writeBackground(1,3,30,monY,colors.black)
	for i=1, #purchaseList do
		screenDesigner.writeText(1,3+i,purchaseList[i][3],bgColor,colors.cyan)
	end
	sleep(2)
	screenDesigner.setWindowState(2,true)
end

function windowData()
	screenDesigner.setWindowStateWithoutDrawing(1)
	for pos,text in ipairs(mainScreenText) do
		screenDesigner.newText(1,pos,text)
	end
	screenDesigner.newText(24,5,"cyan",nil,colors.cyan)
	screenDesigner.newText(20,6,"ALWAYS",nil,colors.red)
	
	--logout button
	screenDesigner.setWindowStateWithoutDrawing(2)
	screenDesigner.newButton(1,state,"LOGOUT",31,1,39,3)
	screenDesigner.makeFlashButton(1)
	newButtonFunction(1,logOut)
	
	--help button
	screenDesigner.newButton(2,state,"?",8,1,8,1,false,colors.orange,colors.white,colors.black)
	screenDesigner.makeFlashButton(2)
	newButtonFunction(2,helpFunc)
	
	--buy/sell mode switch button
	screenDesigner.newButton(3,state,"MODE",31,4,39,6,false,colors.white,colors.blue)
	screenDesigner.makeFlashButton(3)
	newButtonFunction(3,modeSwitch)
	
	screenDesigner.newText(1,1,"Buying",bgColor,colors.lime)
	screenDesigner.newText(1,2,"Item   : Earnings",bgColor,colors.red)
	for i=1, #purchaseList do
		local text = "x1 "..purchaseList[i][1].." : "..purchaseList[i][2]
		screenDesigner.newText(1,3+i,text,bgColor,colors.cyan)
		screenDesigner.newText(string.len(text)+1,3+i,"gB",bgColor,colors.lime)
	end
end

function modeSwitch()
	--1 is buy, 2 is sell
	if modeValue==1 then
		modeValue = 2
		rednet.send(16,"send:nil:nil")
	else
		modeValue=1
		rednet.send(16,"stop")
	end
	rednet.send(17,"sell")
end

function logIn()
	repeat
		event, username = os.pullEvent()
	until event=="player"
	
	if guudeBucks[tostring(username)]==nil then
		newPlayer(username)
	end
	lastUser = username
	rednet.send(2,"login")
	rednet.send(7,"login")
	rednet.send(8,guudeBucks[tostring(username)])
	rednet.send(9,username)
end

function logOut()
	continue = false
	rednet.send(2,"logOff")
	rednet.send(7,"logOff")
	rednet.send(8,"logOff")
	rednet.send(9,"logOff")
	rednet.send(16,"stop")
end

fileReaders()
windowData()

while true do
	redstone.setOutput("right",false)
	screenDesigner.setWindowState(1,true)
	screenDesigner.writeText(math.floor((monX-1 - string.len("Last User: "..lastUser)) /2) +1,monY,"Last User: "..lastUser,nil,colors.yellow)
	logIn()
	redstone.setOutput("right",true)
	activeSection()
end